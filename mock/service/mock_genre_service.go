// Code generated by MockGen. DO NOT EDIT.
// Source: genre_service.go
//
// Generated by this command:
//
//	mockgen -source genre_service.go -destination ../../mock/service/mock_genre_service.go -package mockservice
//

// Package mockservice is a generated GoMock package.
package mockservice

import (
	context "context"
	reflect "reflect"

	domain "github.com/elangreza14/moviefestival/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockgenreRepo is a mock of genreRepo interface.
type MockgenreRepo struct {
	ctrl     *gomock.Controller
	recorder *MockgenreRepoMockRecorder
	isgomock struct{}
}

// MockgenreRepoMockRecorder is the mock recorder for MockgenreRepo.
type MockgenreRepoMockRecorder struct {
	mock *MockgenreRepo
}

// NewMockgenreRepo creates a new mock instance.
func NewMockgenreRepo(ctrl *gomock.Controller) *MockgenreRepo {
	mock := &MockgenreRepo{ctrl: ctrl}
	mock.recorder = &MockgenreRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgenreRepo) EXPECT() *MockgenreRepoMockRecorder {
	return m.recorder
}

// GetMostViewedGenres mocks base method.
func (m *MockgenreRepo) GetMostViewedGenres(ctx context.Context) ([]domain.ViewedGenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostViewedGenres", ctx)
	ret0, _ := ret[0].([]domain.ViewedGenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostViewedGenres indicates an expected call of GetMostViewedGenres.
func (mr *MockgenreRepoMockRecorder) GetMostViewedGenres(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostViewedGenres", reflect.TypeOf((*MockgenreRepo)(nil).GetMostViewedGenres), ctx)
}
